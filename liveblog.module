<?php

/**
 * @file
 * The module file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use \Drupal\Component\Utility\Html;

/**
 * Implements hook_entity_extra_field_info().
 */
function liveblog_entity_extra_field_info() {
  $fields['node']['liveblog']['display']['liveblog_posts'] = [
    'label' => t('Liveblog posts'),
    'description' => t('List of the related liveblog posts.'),
    'weight' => 4,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function liveblog_node_view(array &$build, Node $node, EntityViewDisplayInterface $display) {
  if ($display->getComponent('liveblog_posts')) {
    $javascriptSettings = [
      'getURL'      => '/liveblog/' . $node->id() . '/posts?items_per_page=2',
      'getNextURL'  => '/liveblog/' . $node->id() . '/posts?items_per_page=1&created_op=<&created[value]=@%s',
    ];
    $build['liveblog_posts'] = [
      '#theme' => 'liveblog_posts',
      '#node' => $node,
      // @todo: Add js, css assets.
      '#attached' => [
        'library' => ['liveblog/stream'],
        'drupalSettings' => ['liveblog' => $javascriptSettings],
      ],
    ];
  }
}

/**
 * Implements hook_theme().
 */
function liveblog_theme() {
  return [
    'liveblog_post' => [
      'render element' => 'elements',
    ],
    'liveblog_posts' => [
      'variables' => [
        'node' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_liveblog_post(&$variables) {
  /* @var \Drupal\liveblog\Entity\LiveblogPost $post */
  $post = $variables['elements']['#liveblog_post'];
  $variables['highlight'] = $post->highlight->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_liveblog_posts(&$variables) {
  /* @var $node Drupal\node\Entity\Node */
  $node = $variables['node'];
  // Render related posts.
  if ($node->field_status->value) {
    $views_content = views_embed_view('liveblog_posts', 'liveblog_posts', $node->id());
  }
  else {
    $views_content = views_embed_view('liveblog_posts', 'liveblog_posts_archive', $node->id());
  }
  $variables['posts'] = \Drupal::service('renderer')->render($views_content);
}

/**
 * Gets highlight options from the liveblog.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|NULL $entity
 *   The entity.
 * @param null $cacheable
 *   If $cacheable is FALSE, then the allowed values are not statically
 *   cached. See options_test_dynamic_values_callback() for an example of
 *   generating dynamic and uncached values.
 *
 * @return string[]
 *   Highlight options.
 *
 * @see options_allowed_values()
 */
function liveblog_post_get_highlight_options(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = NULL) {
  $options = [];

  // @todo: get terms from liveblog. hook_entity_prepare_form
  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'highlights')
    ->execute();
  if (!empty($ids)) {
    $terms = Term::loadMultiple($ids);
    foreach ($terms as $term) {
      $name = $term->name->value;
      // Convert term name to a machine name, which will be used as a CSS
      // class in templates.
      $key = strtolower(Html::cleanCssIdentifier($name));
      $options[$key] = $name;
    }
  }

  return $options;
}
